
MIDTERM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00000bf8  00000c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000107  008001e4  008001e4  00000d70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001460  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000941  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b2  00000000  00000000  00002c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a41  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000045e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3e       	cpi	r26, 0xE4	; 228
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 ee       	ldi	r26, 0xE4	; 228
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3e       	cpi	r26, 0xEB	; 235
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 14 02 	call	0x428	; 0x428 <main>
  9e:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <USART_init>:
			_delay_ms(10000);	
	}
}
/* INIT USART (RS-232) */
void USART_init( unsigned int ubrr ) {
	UBRR0H = (unsigned char)(ubrr>>8);
 232:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 236:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0)| ( 1 << RXCIE0); 				// Enable receiver, transmitter & RX interrupt
 23a:	e1 ec       	ldi	r30, 0xC1	; 193
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	88 69       	ori	r24, 0x98	; 152
 242:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
 244:	e2 ec       	ldi	r30, 0xC2	; 194
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	86 60       	ori	r24, 0x06	; 6
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <USART_tx_string>:
}

void USART_tx_string( char *data ) 										// used to print on to the screen
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
	while ((*data != '\0')) {
 254:	fc 01       	movw	r30, r24
 256:	20 81       	ld	r18, Z
 258:	22 23       	and	r18, r18
 25a:	69 f0       	breq	.+26     	; 0x276 <USART_tx_string+0x26>
 25c:	dc 01       	movw	r26, r24
 25e:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1 <<UDRE0)));
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
 264:	c6 ec       	ldi	r28, 0xC6	; 198
 266:	d0 e0       	ldi	r29, 0x00	; 0
}

void USART_tx_string( char *data ) 										// used to print on to the screen
{
	while ((*data != '\0')) {
		while (!(UCSR0A & (1 <<UDRE0)));
 268:	90 81       	ld	r25, Z
 26a:	95 ff       	sbrs	r25, 5
 26c:	fd cf       	rjmp	.-6      	; 0x268 <USART_tx_string+0x18>
		UDR0 = *data;
 26e:	28 83       	st	Y, r18
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
}

void USART_tx_string( char *data ) 										// used to print on to the screen
{
	while ((*data != '\0')) {
 270:	2d 91       	ld	r18, X+
 272:	21 11       	cpse	r18, r1
 274:	f9 cf       	rjmp	.-14     	; 0x268 <USART_tx_string+0x18>
		while (!(UCSR0A & (1 <<UDRE0)));
		UDR0 = *data;
		data++;
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <RGB_dect>:

void RGB_dect(uint16_t *red, uint16_t *blue, uint16_t *green)	 // Function used to read the colors for sensor (red, blue and green)
{
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	7c 01       	movw	r14, r24
 28a:	8b 01       	movw	r16, r22
 28c:	ea 01       	movw	r28, r20
	i2c_readReg(APDS_WRITE, APDS9960_RDATAL, &red_low, 1);
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	46 ee       	ldi	r20, 0xE6	; 230
 294:	52 e0       	ldi	r21, 0x02	; 2
 296:	66 e9       	ldi	r22, 0x96	; 150
 298:	82 e7       	ldi	r24, 0x72	; 114
 29a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	i2c_readReg(APDS_WRITE, APDS9960_RDATAH, &red_high, 1);
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	45 ee       	ldi	r20, 0xE5	; 229
 2a4:	52 e0       	ldi	r21, 0x02	; 2
 2a6:	67 e9       	ldi	r22, 0x97	; 151
 2a8:	82 e7       	ldi	r24, 0x72	; 114
 2aa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	i2c_readReg(APDS_WRITE, APDS9960_GDATAL, &green_low, 1);
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	47 ee       	ldi	r20, 0xE7	; 231
 2b4:	52 e0       	ldi	r21, 0x02	; 2
 2b6:	68 e9       	ldi	r22, 0x98	; 152
 2b8:	82 e7       	ldi	r24, 0x72	; 114
 2ba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	i2c_readReg(APDS_WRITE, APDS9960_GDATAH, &green_high, 1);
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	44 ee       	ldi	r20, 0xE4	; 228
 2c4:	52 e0       	ldi	r21, 0x02	; 2
 2c6:	69 e9       	ldi	r22, 0x99	; 153
 2c8:	82 e7       	ldi	r24, 0x72	; 114
 2ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	i2c_readReg(APDS_WRITE, APDS9960_BDATAL, &blue_low, 1);
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	48 ee       	ldi	r20, 0xE8	; 232
 2d4:	52 e0       	ldi	r21, 0x02	; 2
 2d6:	6a e9       	ldi	r22, 0x9A	; 154
 2d8:	82 e7       	ldi	r24, 0x72	; 114
 2da:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	i2c_readReg(APDS_WRITE, APDS9960_BDATAH, &blue_high, 1);
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	49 ee       	ldi	r20, 0xE9	; 233
 2e4:	52 e0       	ldi	r21, 0x02	; 2
 2e6:	6b e9       	ldi	r22, 0x9B	; 155
 2e8:	82 e7       	ldi	r24, 0x72	; 114
 2ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	*red = red_high << 8 | red_low;
 2ee:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <red_high>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	98 2f       	mov	r25, r24
 2f6:	88 27       	eor	r24, r24
 2f8:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <red_low>
 2fc:	82 2b       	or	r24, r18
 2fe:	f7 01       	movw	r30, r14
 300:	91 83       	std	Z+1, r25	; 0x01
 302:	80 83       	st	Z, r24
	*blue = blue_high << 8 | blue_low;
 304:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <blue_high>
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	98 2f       	mov	r25, r24
 30c:	88 27       	eor	r24, r24
 30e:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <blue_low>
 312:	82 2b       	or	r24, r18
 314:	f8 01       	movw	r30, r16
 316:	91 83       	std	Z+1, r25	; 0x01
 318:	80 83       	st	Z, r24
	*green = green_high << 8 | green_low;
 31a:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <green_high>
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	98 2f       	mov	r25, r24
 322:	88 27       	eor	r24, r24
 324:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <green_low>
 328:	82 2b       	or	r24, r18
 32a:	99 83       	std	Y+1, r25	; 0x01
 32c:	88 83       	st	Y, r24
	
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	08 95       	ret

0000033c <APDS_9960_init>:

void APDS_9960_init()	// Function used to initialize the Sensor only for the RGB, no gesture or proximity used
{
	i2c_readReg(APDS_WRITE, APDS9960_ID, &config,1);
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	4a ee       	ldi	r20, 0xEA	; 234
 342:	52 e0       	ldi	r21, 0x02	; 2
 344:	62 e9       	ldi	r22, 0x92	; 146
 346:	82 e7       	ldi	r24, 0x72	; 114
 348:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	if(config != APDS9960_ID_1)
 34c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <config>
 350:	8b 3a       	cpi	r24, 0xAB	; 171
 352:	09 f0       	breq	.+2      	; 0x356 <APDS_9960_init+0x1a>
 354:	ff cf       	rjmp	.-2      	; 0x354 <APDS_9960_init+0x18>
	while(1)
	{
		config = 1 << 1 | 1 << 0 | 1 << 3 | 1 << 4;
	}
	
	i2c_writeReg(APDS_WRITE, APDS9960_ENABLE, &config, 1);
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	4a ee       	ldi	r20, 0xEA	; 234
 35c:	52 e0       	ldi	r21, 0x02	; 2
 35e:	60 e8       	ldi	r22, 0x80	; 128
 360:	82 e7       	ldi	r24, 0x72	; 114
 362:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_ATIME;
 366:	8b ed       	ldi	r24, 0xDB	; 219
 368:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_ATIME, &config, 1);
 36c:	21 e0       	ldi	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	4a ee       	ldi	r20, 0xEA	; 234
 372:	52 e0       	ldi	r21, 0x02	; 2
 374:	61 e8       	ldi	r22, 0x81	; 129
 376:	82 e7       	ldi	r24, 0x72	; 114
 378:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_WTIME;
 37c:	86 ef       	ldi	r24, 0xF6	; 246
 37e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_WTIME, &config, 1);
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	4a ee       	ldi	r20, 0xEA	; 234
 388:	52 e0       	ldi	r21, 0x02	; 2
 38a:	63 e8       	ldi	r22, 0x83	; 131
 38c:	82 e7       	ldi	r24, 0x72	; 114
 38e:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_PROX_PPULSE;
 392:	87 e8       	ldi	r24, 0x87	; 135
 394:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_PPULSE, &config, 1);
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	4a ee       	ldi	r20, 0xEA	; 234
 39e:	52 e0       	ldi	r21, 0x02	; 2
 3a0:	6e e8       	ldi	r22, 0x8E	; 142
 3a2:	82 e7       	ldi	r24, 0x72	; 114
 3a4:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_POFFSET_UR;
 3a8:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_POFFSET_UR, &config, 1);
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	4a ee       	ldi	r20, 0xEA	; 234
 3b2:	52 e0       	ldi	r21, 0x02	; 2
 3b4:	6d e9       	ldi	r22, 0x9D	; 157
 3b6:	82 e7       	ldi	r24, 0x72	; 114
 3b8:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_POFFSET_DL;
 3bc:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_POFFSET_DL, &config, 1);
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	4a ee       	ldi	r20, 0xEA	; 234
 3c6:	52 e0       	ldi	r21, 0x02	; 2
 3c8:	6e e9       	ldi	r22, 0x9E	; 158
 3ca:	82 e7       	ldi	r24, 0x72	; 114
 3cc:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_CONFIG1;
 3d0:	80 e6       	ldi	r24, 0x60	; 96
 3d2:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_CONFIG1, &config, 1);
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	4a ee       	ldi	r20, 0xEA	; 234
 3dc:	52 e0       	ldi	r21, 0x02	; 2
 3de:	6d e8       	ldi	r22, 0x8D	; 141
 3e0:	82 e7       	ldi	r24, 0x72	; 114
 3e2:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_PERS;
 3e6:	81 e1       	ldi	r24, 0x11	; 17
 3e8:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_PERS, &config, 1);
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	4a ee       	ldi	r20, 0xEA	; 234
 3f2:	52 e0       	ldi	r21, 0x02	; 2
 3f4:	6c e8       	ldi	r22, 0x8C	; 140
 3f6:	82 e7       	ldi	r24, 0x72	; 114
 3f8:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_CONFIG2;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_CONFIG2, &config, 1);
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	4a ee       	ldi	r20, 0xEA	; 234
 408:	52 e0       	ldi	r21, 0x02	; 2
 40a:	60 e9       	ldi	r22, 0x90	; 144
 40c:	82 e7       	ldi	r24, 0x72	; 114
 40e:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_CONFIG3;
 412:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_CONFIG3, &config, 1);
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	4a ee       	ldi	r20, 0xEA	; 234
 41c:	52 e0       	ldi	r21, 0x02	; 2
 41e:	6f e9       	ldi	r22, 0x9F	; 159
 420:	82 e7       	ldi	r24, 0x72	; 114
 422:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
 426:	08 95       	ret

00000428 <main>:

FILE UART_str = FDEV_SETUP_STREAM(sending_char, NULL , _FDEV_SETUP_WRITE);
char outs[256];															// room we have to print

int main(void)
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	c4 58       	subi	r28, 0x84	; 132
 432:	d1 09       	sbc	r29, r1
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
	uint16_t red = 0;														// Declare red
 43e:	1a 82       	std	Y+2, r1	; 0x02
 440:	19 82       	std	Y+1, r1	; 0x01
	uint16_t green = 0;														// Declare green
 442:	1c 82       	std	Y+4, r1	; 0x04
 444:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t blue = 0;														// Declare blue
 446:	1e 82       	std	Y+6, r1	; 0x06
 448:	1d 82       	std	Y+5, r1	; 0x05
		
	i2c_init();																// i2C function call
 44a:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	USART_init(MYUBRR);														// uart initialization function call
 44e:	87 e6       	ldi	r24, 0x67	; 103
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 19 01 	call	0x232	; 0x232 <USART_init>
	APDS_9960_init();														// initialize 9960 sensor function call
 456:	0e 94 9e 01 	call	0x33c	; 0x33c <APDS_9960_init>
	
	unsigned char AT_CHECK[] = "AT\r\n"; 									// AT Commands
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	e6 e6       	ldi	r30, 0x66	; 102
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	de 01       	movw	r26, r28
 462:	17 96       	adiw	r26, 0x07	; 7
 464:	01 90       	ld	r0, Z+
 466:	0d 92       	st	X+, r0
 468:	8a 95       	dec	r24
 46a:	e1 f7       	brne	.-8      	; 0x464 <main+0x3c>
	unsigned char CWMODE_SET[] = "AT+CWMODE=1\r\n"; 						// Set MODE
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	eb e6       	ldi	r30, 0x6B	; 107
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	de 01       	movw	r26, r28
 474:	1c 96       	adiw	r26, 0x0c	; 12
 476:	01 90       	ld	r0, Z+
 478:	0d 92       	st	X+, r0
 47a:	8a 95       	dec	r24
 47c:	e1 f7       	brne	.-8      	; 0x476 <main+0x4e>
	unsigned char CWJAP_LOGIN[] = "AT+CWJAP=\"iPXSMax\",\"12345678\"\r\n"; 	// MUST CHANGE WIFI AND PASSWORD
 47e:	80 e2       	ldi	r24, 0x20	; 32
 480:	e9 e7       	ldi	r30, 0x79	; 121
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	de 01       	movw	r26, r28
 486:	5a 96       	adiw	r26, 0x1a	; 26
 488:	01 90       	ld	r0, Z+
 48a:	0d 92       	st	X+, r0
 48c:	8a 95       	dec	r24
 48e:	e1 f7       	brne	.-8      	; 0x488 <main+0x60>
	unsigned char CIPMUX_SET[] = "AT+CIPMUX=0\r\n";
 490:	8e e0       	ldi	r24, 0x0E	; 14
 492:	e9 e9       	ldi	r30, 0x99	; 153
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	de 01       	movw	r26, r28
 498:	da 96       	adiw	r26, 0x3a	; 58
 49a:	01 90       	ld	r0, Z+
 49c:	0d 92       	st	X+, r0
 49e:	8a 95       	dec	r24
 4a0:	e1 f7       	brne	.-8      	; 0x49a <main+0x72>
	unsigned char CIPSTART_SEND[] = "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n";
 4a2:	8c e2       	ldi	r24, 0x2C	; 44
 4a4:	e7 ea       	ldi	r30, 0xA7	; 167
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	de 01       	movw	r26, r28
 4aa:	a8 5b       	subi	r26, 0xB8	; 184
 4ac:	bf 4f       	sbci	r27, 0xFF	; 255
 4ae:	01 90       	ld	r0, Z+
 4b0:	0d 92       	st	X+, r0
 4b2:	8a 95       	dec	r24
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <main+0x86>
	unsigned char CIPSEND_FINISH[] = "AT+CIPSEND=100\r\n";
 4b6:	81 e1       	ldi	r24, 0x11	; 17
 4b8:	e3 ed       	ldi	r30, 0xD3	; 211
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	de 01       	movw	r26, r28
 4be:	ac 58       	subi	r26, 0x8C	; 140
 4c0:	bf 4f       	sbci	r27, 0xFF	; 255
 4c2:	01 90       	ld	r0, Z+
 4c4:	0d 92       	st	X+, r0
 4c6:	8a 95       	dec	r24
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <main+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ca:	2f ef       	ldi	r18, 0xFF	; 255
 4cc:	31 e1       	ldi	r19, 0x11	; 17
 4ce:	8a e7       	ldi	r24, 0x7A	; 122
 4d0:	21 50       	subi	r18, 0x01	; 1
 4d2:	30 40       	sbci	r19, 0x00	; 0
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <main+0xa8>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <main+0xb2>
 4da:	00 00       	nop

	_delay_ms(2500);
	USART_tx_string(AT_CHECK); 													//send commands
 4dc:	ce 01       	movw	r24, r28
 4de:	07 96       	adiw	r24, 0x07	; 7
 4e0:	0e 94 28 01 	call	0x250	; 0x250 <USART_tx_string>
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	23 e2       	ldi	r18, 0x23	; 35
 4e8:	34 ef       	ldi	r19, 0xF4	; 244
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	91 50       	subi	r25, 0x01	; 1
 4ee:	20 40       	sbci	r18, 0x00	; 0
 4f0:	30 40       	sbci	r19, 0x00	; 0
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	d9 f7       	brne	.-10     	; 0x4ec <main+0xc4>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0xd0>
 4f8:	00 00       	nop
	_delay_ms(6000);
	USART_tx_string(CWMODE_SET); 												//set mode
 4fa:	ce 01       	movw	r24, r28
 4fc:	0c 96       	adiw	r24, 0x0c	; 12
 4fe:	0e 94 28 01 	call	0x250	; 0x250 <USART_tx_string>
 502:	9f ef       	ldi	r25, 0xFF	; 255
 504:	23 e2       	ldi	r18, 0x23	; 35
 506:	34 ef       	ldi	r19, 0xF4	; 244
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	91 50       	subi	r25, 0x01	; 1
 50c:	20 40       	sbci	r18, 0x00	; 0
 50e:	30 40       	sbci	r19, 0x00	; 0
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	d9 f7       	brne	.-10     	; 0x50a <main+0xe2>
 514:	00 c0       	rjmp	.+0      	; 0x516 <main+0xee>
 516:	00 00       	nop
	_delay_ms(6000);
	USART_tx_string(CWJAP_LOGIN); 												//connect to Wifi
 518:	ce 01       	movw	r24, r28
 51a:	4a 96       	adiw	r24, 0x1a	; 26
 51c:	0e 94 28 01 	call	0x250	; 0x250 <USART_tx_string>
 520:	9a ea       	ldi	r25, 0xAA	; 170
 522:	2a e0       	ldi	r18, 0x0A	; 10
 524:	3b e8       	ldi	r19, 0x8B	; 139
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	91 50       	subi	r25, 0x01	; 1
 52a:	20 40       	sbci	r18, 0x00	; 0
 52c:	30 40       	sbci	r19, 0x00	; 0
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	d9 f7       	brne	.-10     	; 0x528 <main+0x100>
 532:	00 00       	nop
			USART_tx_string(CIPSEND_FINISH);											//send size
			_delay_ms(6000);
		
			RGB_dect(&red, &blue, &green);												// Call colors function
		
			snprintf(outs,sizeof(outs),"GET https://api.thingspeak.com/update?api_key=5HICIFGYJQ1XUU90&field1=0%05u&field2=%05u&field3=%05u\r\n", red,green,blue); // print it
 534:	0f 2e       	mov	r0, r31
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	ef 2e       	mov	r14, r31
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	ff 2e       	mov	r15, r31
 53e:	f0 2d       	mov	r31, r0
 540:	dd 24       	eor	r13, r13
 542:	d3 94       	inc	r13
 544:	04 ee       	ldi	r16, 0xE4	; 228
 546:	11 e0       	ldi	r17, 0x01	; 1
	while (1)
	{
		
	///////////////////////// SENDING RED, GREEN, BLUE READINGS/////////////////////////
		
			USART_tx_string(CIPMUX_SET); 												//select MUX
 548:	ce 01       	movw	r24, r28
 54a:	ca 96       	adiw	r24, 0x3a	; 58
 54c:	0e 94 28 01 	call	0x250	; 0x250 <USART_tx_string>
 550:	9a ea       	ldi	r25, 0xAA	; 170
 552:	26 ee       	ldi	r18, 0xE6	; 230
 554:	36 e9       	ldi	r19, 0x96	; 150
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	91 50       	subi	r25, 0x01	; 1
 55a:	20 40       	sbci	r18, 0x00	; 0
 55c:	30 40       	sbci	r19, 0x00	; 0
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	d9 f7       	brne	.-10     	; 0x558 <main+0x130>
 562:	00 00       	nop
			_delay_ms(10000);
			USART_tx_string(CIPSTART_SEND);												//connect TCP
 564:	ce 01       	movw	r24, r28
 566:	88 5b       	subi	r24, 0xB8	; 184
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	0e 94 28 01 	call	0x250	; 0x250 <USART_tx_string>
 56e:	9a ea       	ldi	r25, 0xAA	; 170
 570:	26 ee       	ldi	r18, 0xE6	; 230
 572:	36 e9       	ldi	r19, 0x96	; 150
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	91 50       	subi	r25, 0x01	; 1
 578:	20 40       	sbci	r18, 0x00	; 0
 57a:	30 40       	sbci	r19, 0x00	; 0
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	d9 f7       	brne	.-10     	; 0x576 <main+0x14e>
 580:	00 00       	nop
			_delay_ms(10000);
			USART_tx_string(CIPSEND_FINISH);											//send size
 582:	ce 01       	movw	r24, r28
 584:	8c 58       	subi	r24, 0x8C	; 140
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	0e 94 28 01 	call	0x250	; 0x250 <USART_tx_string>
 58c:	9f ef       	ldi	r25, 0xFF	; 255
 58e:	23 e2       	ldi	r18, 0x23	; 35
 590:	34 ef       	ldi	r19, 0xF4	; 244
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	91 50       	subi	r25, 0x01	; 1
 596:	20 40       	sbci	r18, 0x00	; 0
 598:	30 40       	sbci	r19, 0x00	; 0
 59a:	80 40       	sbci	r24, 0x00	; 0
 59c:	d9 f7       	brne	.-10     	; 0x594 <main+0x16c>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <main+0x178>
 5a0:	00 00       	nop
			_delay_ms(6000);
		
			RGB_dect(&red, &blue, &green);												// Call colors function
 5a2:	ae 01       	movw	r20, r28
 5a4:	4d 5f       	subi	r20, 0xFD	; 253
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255
 5a8:	be 01       	movw	r22, r28
 5aa:	6b 5f       	subi	r22, 0xFB	; 251
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	0e 94 3e 01 	call	0x27c	; 0x27c <RGB_dect>
		
			snprintf(outs,sizeof(outs),"GET https://api.thingspeak.com/update?api_key=5HICIFGYJQ1XUU90&field1=0%05u&field2=%05u&field3=%05u\r\n", red,green,blue); // print it
 5b6:	8e 81       	ldd	r24, Y+6	; 0x06
 5b8:	8f 93       	push	r24
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	8f 93       	push	r24
 5be:	8c 81       	ldd	r24, Y+4	; 0x04
 5c0:	8f 93       	push	r24
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	8f 93       	push	r24
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	8f 93       	push	r24
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	8f 93       	push	r24
 5ce:	ff 92       	push	r15
 5d0:	ef 92       	push	r14
 5d2:	df 92       	push	r13
 5d4:	1f 92       	push	r1
 5d6:	1f 93       	push	r17
 5d8:	0f 93       	push	r16
 5da:	0e 94 02 03 	call	0x604	; 0x604 <snprintf>
			USART_tx_string(outs);														//send data
 5de:	c8 01       	movw	r24, r16
 5e0:	0e 94 28 01 	call	0x250	; 0x250 <USART_tx_string>
 5e4:	9a ea       	ldi	r25, 0xAA	; 170
 5e6:	26 ee       	ldi	r18, 0xE6	; 230
 5e8:	36 e9       	ldi	r19, 0x96	; 150
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	91 50       	subi	r25, 0x01	; 1
 5ee:	20 40       	sbci	r18, 0x00	; 0
 5f0:	30 40       	sbci	r19, 0x00	; 0
 5f2:	80 40       	sbci	r24, 0x00	; 0
 5f4:	d9 f7       	brne	.-10     	; 0x5ec <main+0x1c4>
 5f6:	00 00       	nop
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	de bf       	out	0x3e, r29	; 62
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	cd bf       	out	0x3d, r28	; 61
 602:	a2 cf       	rjmp	.-188    	; 0x548 <main+0x120>

00000604 <snprintf>:
 604:	ae e0       	ldi	r26, 0x0E	; 14
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e8 e0       	ldi	r30, 0x08	; 8
 60a:	f3 e0       	ldi	r31, 0x03	; 3
 60c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__prologue_saves__+0x1c>
 610:	0d 89       	ldd	r16, Y+21	; 0x15
 612:	1e 89       	ldd	r17, Y+22	; 0x16
 614:	8f 89       	ldd	r24, Y+23	; 0x17
 616:	98 8d       	ldd	r25, Y+24	; 0x18
 618:	26 e0       	ldi	r18, 0x06	; 6
 61a:	2c 83       	std	Y+4, r18	; 0x04
 61c:	1a 83       	std	Y+2, r17	; 0x02
 61e:	09 83       	std	Y+1, r16	; 0x01
 620:	97 ff       	sbrs	r25, 7
 622:	02 c0       	rjmp	.+4      	; 0x628 <snprintf+0x24>
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e8       	ldi	r25, 0x80	; 128
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	9e 83       	std	Y+6, r25	; 0x06
 62c:	8d 83       	std	Y+5, r24	; 0x05
 62e:	ae 01       	movw	r20, r28
 630:	45 5e       	subi	r20, 0xE5	; 229
 632:	5f 4f       	sbci	r21, 0xFF	; 255
 634:	69 8d       	ldd	r22, Y+25	; 0x19
 636:	7a 8d       	ldd	r23, Y+26	; 0x1a
 638:	ce 01       	movw	r24, r28
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	0e 94 32 03 	call	0x664	; 0x664 <vfprintf>
 640:	4d 81       	ldd	r20, Y+5	; 0x05
 642:	5e 81       	ldd	r21, Y+6	; 0x06
 644:	57 fd       	sbrc	r21, 7
 646:	0a c0       	rjmp	.+20     	; 0x65c <snprintf+0x58>
 648:	2f 81       	ldd	r18, Y+7	; 0x07
 64a:	38 85       	ldd	r19, Y+8	; 0x08
 64c:	42 17       	cp	r20, r18
 64e:	53 07       	cpc	r21, r19
 650:	0c f4       	brge	.+2      	; 0x654 <snprintf+0x50>
 652:	9a 01       	movw	r18, r20
 654:	f8 01       	movw	r30, r16
 656:	e2 0f       	add	r30, r18
 658:	f3 1f       	adc	r31, r19
 65a:	10 82       	st	Z, r1
 65c:	2e 96       	adiw	r28, 0x0e	; 14
 65e:	e4 e0       	ldi	r30, 0x04	; 4
 660:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__epilogue_restores__+0x1c>

00000664 <vfprintf>:
 664:	ab e0       	ldi	r26, 0x0B	; 11
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	e8 e3       	ldi	r30, 0x38	; 56
 66a:	f3 e0       	ldi	r31, 0x03	; 3
 66c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__prologue_saves__>
 670:	6c 01       	movw	r12, r24
 672:	7b 01       	movw	r14, r22
 674:	8a 01       	movw	r16, r20
 676:	fc 01       	movw	r30, r24
 678:	17 82       	std	Z+7, r1	; 0x07
 67a:	16 82       	std	Z+6, r1	; 0x06
 67c:	83 81       	ldd	r24, Z+3	; 0x03
 67e:	81 ff       	sbrs	r24, 1
 680:	cc c1       	rjmp	.+920    	; 0xa1a <__stack+0x11b>
 682:	ce 01       	movw	r24, r28
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	3c 01       	movw	r6, r24
 688:	f6 01       	movw	r30, r12
 68a:	93 81       	ldd	r25, Z+3	; 0x03
 68c:	f7 01       	movw	r30, r14
 68e:	93 fd       	sbrc	r25, 3
 690:	85 91       	lpm	r24, Z+
 692:	93 ff       	sbrs	r25, 3
 694:	81 91       	ld	r24, Z+
 696:	7f 01       	movw	r14, r30
 698:	88 23       	and	r24, r24
 69a:	09 f4       	brne	.+2      	; 0x69e <vfprintf+0x3a>
 69c:	ba c1       	rjmp	.+884    	; 0xa12 <__stack+0x113>
 69e:	85 32       	cpi	r24, 0x25	; 37
 6a0:	39 f4       	brne	.+14     	; 0x6b0 <vfprintf+0x4c>
 6a2:	93 fd       	sbrc	r25, 3
 6a4:	85 91       	lpm	r24, Z+
 6a6:	93 ff       	sbrs	r25, 3
 6a8:	81 91       	ld	r24, Z+
 6aa:	7f 01       	movw	r14, r30
 6ac:	85 32       	cpi	r24, 0x25	; 37
 6ae:	29 f4       	brne	.+10     	; 0x6ba <vfprintf+0x56>
 6b0:	b6 01       	movw	r22, r12
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 6b8:	e7 cf       	rjmp	.-50     	; 0x688 <vfprintf+0x24>
 6ba:	91 2c       	mov	r9, r1
 6bc:	21 2c       	mov	r2, r1
 6be:	31 2c       	mov	r3, r1
 6c0:	ff e1       	ldi	r31, 0x1F	; 31
 6c2:	f3 15       	cp	r31, r3
 6c4:	d8 f0       	brcs	.+54     	; 0x6fc <vfprintf+0x98>
 6c6:	8b 32       	cpi	r24, 0x2B	; 43
 6c8:	79 f0       	breq	.+30     	; 0x6e8 <vfprintf+0x84>
 6ca:	38 f4       	brcc	.+14     	; 0x6da <vfprintf+0x76>
 6cc:	80 32       	cpi	r24, 0x20	; 32
 6ce:	79 f0       	breq	.+30     	; 0x6ee <vfprintf+0x8a>
 6d0:	83 32       	cpi	r24, 0x23	; 35
 6d2:	a1 f4       	brne	.+40     	; 0x6fc <vfprintf+0x98>
 6d4:	23 2d       	mov	r18, r3
 6d6:	20 61       	ori	r18, 0x10	; 16
 6d8:	1d c0       	rjmp	.+58     	; 0x714 <vfprintf+0xb0>
 6da:	8d 32       	cpi	r24, 0x2D	; 45
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <vfprintf+0x92>
 6de:	80 33       	cpi	r24, 0x30	; 48
 6e0:	69 f4       	brne	.+26     	; 0x6fc <vfprintf+0x98>
 6e2:	23 2d       	mov	r18, r3
 6e4:	21 60       	ori	r18, 0x01	; 1
 6e6:	16 c0       	rjmp	.+44     	; 0x714 <vfprintf+0xb0>
 6e8:	83 2d       	mov	r24, r3
 6ea:	82 60       	ori	r24, 0x02	; 2
 6ec:	38 2e       	mov	r3, r24
 6ee:	e3 2d       	mov	r30, r3
 6f0:	e4 60       	ori	r30, 0x04	; 4
 6f2:	3e 2e       	mov	r3, r30
 6f4:	2a c0       	rjmp	.+84     	; 0x74a <vfprintf+0xe6>
 6f6:	f3 2d       	mov	r31, r3
 6f8:	f8 60       	ori	r31, 0x08	; 8
 6fa:	1d c0       	rjmp	.+58     	; 0x736 <vfprintf+0xd2>
 6fc:	37 fc       	sbrc	r3, 7
 6fe:	2d c0       	rjmp	.+90     	; 0x75a <vfprintf+0xf6>
 700:	20 ed       	ldi	r18, 0xD0	; 208
 702:	28 0f       	add	r18, r24
 704:	2a 30       	cpi	r18, 0x0A	; 10
 706:	40 f0       	brcs	.+16     	; 0x718 <vfprintf+0xb4>
 708:	8e 32       	cpi	r24, 0x2E	; 46
 70a:	b9 f4       	brne	.+46     	; 0x73a <vfprintf+0xd6>
 70c:	36 fc       	sbrc	r3, 6
 70e:	81 c1       	rjmp	.+770    	; 0xa12 <__stack+0x113>
 710:	23 2d       	mov	r18, r3
 712:	20 64       	ori	r18, 0x40	; 64
 714:	32 2e       	mov	r3, r18
 716:	19 c0       	rjmp	.+50     	; 0x74a <vfprintf+0xe6>
 718:	36 fe       	sbrs	r3, 6
 71a:	06 c0       	rjmp	.+12     	; 0x728 <vfprintf+0xc4>
 71c:	8a e0       	ldi	r24, 0x0A	; 10
 71e:	98 9e       	mul	r9, r24
 720:	20 0d       	add	r18, r0
 722:	11 24       	eor	r1, r1
 724:	92 2e       	mov	r9, r18
 726:	11 c0       	rjmp	.+34     	; 0x74a <vfprintf+0xe6>
 728:	ea e0       	ldi	r30, 0x0A	; 10
 72a:	2e 9e       	mul	r2, r30
 72c:	20 0d       	add	r18, r0
 72e:	11 24       	eor	r1, r1
 730:	22 2e       	mov	r2, r18
 732:	f3 2d       	mov	r31, r3
 734:	f0 62       	ori	r31, 0x20	; 32
 736:	3f 2e       	mov	r3, r31
 738:	08 c0       	rjmp	.+16     	; 0x74a <vfprintf+0xe6>
 73a:	8c 36       	cpi	r24, 0x6C	; 108
 73c:	21 f4       	brne	.+8      	; 0x746 <vfprintf+0xe2>
 73e:	83 2d       	mov	r24, r3
 740:	80 68       	ori	r24, 0x80	; 128
 742:	38 2e       	mov	r3, r24
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0xe6>
 746:	88 36       	cpi	r24, 0x68	; 104
 748:	41 f4       	brne	.+16     	; 0x75a <vfprintf+0xf6>
 74a:	f7 01       	movw	r30, r14
 74c:	93 fd       	sbrc	r25, 3
 74e:	85 91       	lpm	r24, Z+
 750:	93 ff       	sbrs	r25, 3
 752:	81 91       	ld	r24, Z+
 754:	7f 01       	movw	r14, r30
 756:	81 11       	cpse	r24, r1
 758:	b3 cf       	rjmp	.-154    	; 0x6c0 <vfprintf+0x5c>
 75a:	98 2f       	mov	r25, r24
 75c:	9f 7d       	andi	r25, 0xDF	; 223
 75e:	95 54       	subi	r25, 0x45	; 69
 760:	93 30       	cpi	r25, 0x03	; 3
 762:	28 f4       	brcc	.+10     	; 0x76e <vfprintf+0x10a>
 764:	0c 5f       	subi	r16, 0xFC	; 252
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	9f e3       	ldi	r25, 0x3F	; 63
 76a:	99 83       	std	Y+1, r25	; 0x01
 76c:	0d c0       	rjmp	.+26     	; 0x788 <vfprintf+0x124>
 76e:	83 36       	cpi	r24, 0x63	; 99
 770:	31 f0       	breq	.+12     	; 0x77e <vfprintf+0x11a>
 772:	83 37       	cpi	r24, 0x73	; 115
 774:	71 f0       	breq	.+28     	; 0x792 <vfprintf+0x12e>
 776:	83 35       	cpi	r24, 0x53	; 83
 778:	09 f0       	breq	.+2      	; 0x77c <vfprintf+0x118>
 77a:	59 c0       	rjmp	.+178    	; 0x82e <vfprintf+0x1ca>
 77c:	21 c0       	rjmp	.+66     	; 0x7c0 <vfprintf+0x15c>
 77e:	f8 01       	movw	r30, r16
 780:	80 81       	ld	r24, Z
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	0e 5f       	subi	r16, 0xFE	; 254
 786:	1f 4f       	sbci	r17, 0xFF	; 255
 788:	88 24       	eor	r8, r8
 78a:	83 94       	inc	r8
 78c:	91 2c       	mov	r9, r1
 78e:	53 01       	movw	r10, r6
 790:	13 c0       	rjmp	.+38     	; 0x7b8 <vfprintf+0x154>
 792:	28 01       	movw	r4, r16
 794:	f2 e0       	ldi	r31, 0x02	; 2
 796:	4f 0e       	add	r4, r31
 798:	51 1c       	adc	r5, r1
 79a:	f8 01       	movw	r30, r16
 79c:	a0 80       	ld	r10, Z
 79e:	b1 80       	ldd	r11, Z+1	; 0x01
 7a0:	36 fe       	sbrs	r3, 6
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <vfprintf+0x146>
 7a4:	69 2d       	mov	r22, r9
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <vfprintf+0x14a>
 7aa:	6f ef       	ldi	r22, 0xFF	; 255
 7ac:	7f ef       	ldi	r23, 0xFF	; 255
 7ae:	c5 01       	movw	r24, r10
 7b0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <strnlen>
 7b4:	4c 01       	movw	r8, r24
 7b6:	82 01       	movw	r16, r4
 7b8:	f3 2d       	mov	r31, r3
 7ba:	ff 77       	andi	r31, 0x7F	; 127
 7bc:	3f 2e       	mov	r3, r31
 7be:	16 c0       	rjmp	.+44     	; 0x7ec <vfprintf+0x188>
 7c0:	28 01       	movw	r4, r16
 7c2:	22 e0       	ldi	r18, 0x02	; 2
 7c4:	42 0e       	add	r4, r18
 7c6:	51 1c       	adc	r5, r1
 7c8:	f8 01       	movw	r30, r16
 7ca:	a0 80       	ld	r10, Z
 7cc:	b1 80       	ldd	r11, Z+1	; 0x01
 7ce:	36 fe       	sbrs	r3, 6
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <vfprintf+0x174>
 7d2:	69 2d       	mov	r22, r9
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x178>
 7d8:	6f ef       	ldi	r22, 0xFF	; 255
 7da:	7f ef       	ldi	r23, 0xFF	; 255
 7dc:	c5 01       	movw	r24, r10
 7de:	0e 94 13 05 	call	0xa26	; 0xa26 <strnlen_P>
 7e2:	4c 01       	movw	r8, r24
 7e4:	f3 2d       	mov	r31, r3
 7e6:	f0 68       	ori	r31, 0x80	; 128
 7e8:	3f 2e       	mov	r3, r31
 7ea:	82 01       	movw	r16, r4
 7ec:	33 fc       	sbrc	r3, 3
 7ee:	1b c0       	rjmp	.+54     	; 0x826 <vfprintf+0x1c2>
 7f0:	82 2d       	mov	r24, r2
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	88 16       	cp	r8, r24
 7f6:	99 06       	cpc	r9, r25
 7f8:	b0 f4       	brcc	.+44     	; 0x826 <vfprintf+0x1c2>
 7fa:	b6 01       	movw	r22, r12
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 804:	2a 94       	dec	r2
 806:	f4 cf       	rjmp	.-24     	; 0x7f0 <vfprintf+0x18c>
 808:	f5 01       	movw	r30, r10
 80a:	37 fc       	sbrc	r3, 7
 80c:	85 91       	lpm	r24, Z+
 80e:	37 fe       	sbrs	r3, 7
 810:	81 91       	ld	r24, Z+
 812:	5f 01       	movw	r10, r30
 814:	b6 01       	movw	r22, r12
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 81c:	21 10       	cpse	r2, r1
 81e:	2a 94       	dec	r2
 820:	21 e0       	ldi	r18, 0x01	; 1
 822:	82 1a       	sub	r8, r18
 824:	91 08       	sbc	r9, r1
 826:	81 14       	cp	r8, r1
 828:	91 04       	cpc	r9, r1
 82a:	71 f7       	brne	.-36     	; 0x808 <vfprintf+0x1a4>
 82c:	e8 c0       	rjmp	.+464    	; 0x9fe <__stack+0xff>
 82e:	84 36       	cpi	r24, 0x64	; 100
 830:	11 f0       	breq	.+4      	; 0x836 <vfprintf+0x1d2>
 832:	89 36       	cpi	r24, 0x69	; 105
 834:	41 f5       	brne	.+80     	; 0x886 <vfprintf+0x222>
 836:	f8 01       	movw	r30, r16
 838:	37 fe       	sbrs	r3, 7
 83a:	07 c0       	rjmp	.+14     	; 0x84a <vfprintf+0x1e6>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	0c 5f       	subi	r16, 0xFC	; 252
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	08 c0       	rjmp	.+16     	; 0x85a <vfprintf+0x1f6>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	07 2e       	mov	r0, r23
 850:	00 0c       	add	r0, r0
 852:	88 0b       	sbc	r24, r24
 854:	99 0b       	sbc	r25, r25
 856:	0e 5f       	subi	r16, 0xFE	; 254
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	f3 2d       	mov	r31, r3
 85c:	ff 76       	andi	r31, 0x6F	; 111
 85e:	3f 2e       	mov	r3, r31
 860:	97 ff       	sbrs	r25, 7
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x212>
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	f0 68       	ori	r31, 0x80	; 128
 874:	3f 2e       	mov	r3, r31
 876:	2a e0       	ldi	r18, 0x0A	; 10
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	a3 01       	movw	r20, r6
 87c:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 880:	88 2e       	mov	r8, r24
 882:	86 18       	sub	r8, r6
 884:	45 c0       	rjmp	.+138    	; 0x910 <__stack+0x11>
 886:	85 37       	cpi	r24, 0x75	; 117
 888:	31 f4       	brne	.+12     	; 0x896 <vfprintf+0x232>
 88a:	23 2d       	mov	r18, r3
 88c:	2f 7e       	andi	r18, 0xEF	; 239
 88e:	b2 2e       	mov	r11, r18
 890:	2a e0       	ldi	r18, 0x0A	; 10
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	25 c0       	rjmp	.+74     	; 0x8e0 <vfprintf+0x27c>
 896:	93 2d       	mov	r25, r3
 898:	99 7f       	andi	r25, 0xF9	; 249
 89a:	b9 2e       	mov	r11, r25
 89c:	8f 36       	cpi	r24, 0x6F	; 111
 89e:	c1 f0       	breq	.+48     	; 0x8d0 <vfprintf+0x26c>
 8a0:	18 f4       	brcc	.+6      	; 0x8a8 <vfprintf+0x244>
 8a2:	88 35       	cpi	r24, 0x58	; 88
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <vfprintf+0x260>
 8a6:	b5 c0       	rjmp	.+362    	; 0xa12 <__stack+0x113>
 8a8:	80 37       	cpi	r24, 0x70	; 112
 8aa:	19 f0       	breq	.+6      	; 0x8b2 <vfprintf+0x24e>
 8ac:	88 37       	cpi	r24, 0x78	; 120
 8ae:	21 f0       	breq	.+8      	; 0x8b8 <vfprintf+0x254>
 8b0:	b0 c0       	rjmp	.+352    	; 0xa12 <__stack+0x113>
 8b2:	e9 2f       	mov	r30, r25
 8b4:	e0 61       	ori	r30, 0x10	; 16
 8b6:	be 2e       	mov	r11, r30
 8b8:	b4 fe       	sbrs	r11, 4
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <vfprintf+0x272>
 8bc:	fb 2d       	mov	r31, r11
 8be:	f4 60       	ori	r31, 0x04	; 4
 8c0:	bf 2e       	mov	r11, r31
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x272>
 8c4:	34 fe       	sbrs	r3, 4
 8c6:	0a c0       	rjmp	.+20     	; 0x8dc <vfprintf+0x278>
 8c8:	29 2f       	mov	r18, r25
 8ca:	26 60       	ori	r18, 0x06	; 6
 8cc:	b2 2e       	mov	r11, r18
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0x278>
 8d0:	28 e0       	ldi	r18, 0x08	; 8
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <vfprintf+0x27c>
 8d6:	20 e1       	ldi	r18, 0x10	; 16
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x27c>
 8dc:	20 e1       	ldi	r18, 0x10	; 16
 8de:	32 e0       	ldi	r19, 0x02	; 2
 8e0:	f8 01       	movw	r30, r16
 8e2:	b7 fe       	sbrs	r11, 7
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <vfprintf+0x290>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	0c 5f       	subi	r16, 0xFC	; 252
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <__stack+0x1>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 5f       	subi	r16, 0xFE	; 254
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	a3 01       	movw	r20, r6
 902:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 906:	88 2e       	mov	r8, r24
 908:	86 18       	sub	r8, r6
 90a:	fb 2d       	mov	r31, r11
 90c:	ff 77       	andi	r31, 0x7F	; 127
 90e:	3f 2e       	mov	r3, r31
 910:	36 fe       	sbrs	r3, 6
 912:	0d c0       	rjmp	.+26     	; 0x92e <__stack+0x2f>
 914:	23 2d       	mov	r18, r3
 916:	2e 7f       	andi	r18, 0xFE	; 254
 918:	a2 2e       	mov	r10, r18
 91a:	89 14       	cp	r8, r9
 91c:	58 f4       	brcc	.+22     	; 0x934 <__stack+0x35>
 91e:	34 fe       	sbrs	r3, 4
 920:	0b c0       	rjmp	.+22     	; 0x938 <__stack+0x39>
 922:	32 fc       	sbrc	r3, 2
 924:	09 c0       	rjmp	.+18     	; 0x938 <__stack+0x39>
 926:	83 2d       	mov	r24, r3
 928:	8e 7e       	andi	r24, 0xEE	; 238
 92a:	a8 2e       	mov	r10, r24
 92c:	05 c0       	rjmp	.+10     	; 0x938 <__stack+0x39>
 92e:	b8 2c       	mov	r11, r8
 930:	a3 2c       	mov	r10, r3
 932:	03 c0       	rjmp	.+6      	; 0x93a <__stack+0x3b>
 934:	b8 2c       	mov	r11, r8
 936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
 938:	b9 2c       	mov	r11, r9
 93a:	a4 fe       	sbrs	r10, 4
 93c:	0f c0       	rjmp	.+30     	; 0x95c <__stack+0x5d>
 93e:	fe 01       	movw	r30, r28
 940:	e8 0d       	add	r30, r8
 942:	f1 1d       	adc	r31, r1
 944:	80 81       	ld	r24, Z
 946:	80 33       	cpi	r24, 0x30	; 48
 948:	21 f4       	brne	.+8      	; 0x952 <__stack+0x53>
 94a:	9a 2d       	mov	r25, r10
 94c:	99 7e       	andi	r25, 0xE9	; 233
 94e:	a9 2e       	mov	r10, r25
 950:	09 c0       	rjmp	.+18     	; 0x964 <__stack+0x65>
 952:	a2 fe       	sbrs	r10, 2
 954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
 956:	b3 94       	inc	r11
 958:	b3 94       	inc	r11
 95a:	04 c0       	rjmp	.+8      	; 0x964 <__stack+0x65>
 95c:	8a 2d       	mov	r24, r10
 95e:	86 78       	andi	r24, 0x86	; 134
 960:	09 f0       	breq	.+2      	; 0x964 <__stack+0x65>
 962:	b3 94       	inc	r11
 964:	a3 fc       	sbrc	r10, 3
 966:	11 c0       	rjmp	.+34     	; 0x98a <__stack+0x8b>
 968:	a0 fe       	sbrs	r10, 0
 96a:	06 c0       	rjmp	.+12     	; 0x978 <__stack+0x79>
 96c:	b2 14       	cp	r11, r2
 96e:	88 f4       	brcc	.+34     	; 0x992 <__stack+0x93>
 970:	28 0c       	add	r2, r8
 972:	92 2c       	mov	r9, r2
 974:	9b 18       	sub	r9, r11
 976:	0e c0       	rjmp	.+28     	; 0x994 <__stack+0x95>
 978:	b2 14       	cp	r11, r2
 97a:	60 f4       	brcc	.+24     	; 0x994 <__stack+0x95>
 97c:	b6 01       	movw	r22, r12
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 986:	b3 94       	inc	r11
 988:	f7 cf       	rjmp	.-18     	; 0x978 <__stack+0x79>
 98a:	b2 14       	cp	r11, r2
 98c:	18 f4       	brcc	.+6      	; 0x994 <__stack+0x95>
 98e:	2b 18       	sub	r2, r11
 990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x97>
 992:	98 2c       	mov	r9, r8
 994:	21 2c       	mov	r2, r1
 996:	a4 fe       	sbrs	r10, 4
 998:	10 c0       	rjmp	.+32     	; 0x9ba <__stack+0xbb>
 99a:	b6 01       	movw	r22, r12
 99c:	80 e3       	ldi	r24, 0x30	; 48
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9a4:	a2 fe       	sbrs	r10, 2
 9a6:	17 c0       	rjmp	.+46     	; 0x9d6 <__stack+0xd7>
 9a8:	a1 fc       	sbrc	r10, 1
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <__stack+0xb3>
 9ac:	88 e7       	ldi	r24, 0x78	; 120
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
 9b2:	88 e5       	ldi	r24, 0x58	; 88
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	b6 01       	movw	r22, r12
 9b8:	0c c0       	rjmp	.+24     	; 0x9d2 <__stack+0xd3>
 9ba:	8a 2d       	mov	r24, r10
 9bc:	86 78       	andi	r24, 0x86	; 134
 9be:	59 f0       	breq	.+22     	; 0x9d6 <__stack+0xd7>
 9c0:	a1 fe       	sbrs	r10, 1
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
 9c4:	8b e2       	ldi	r24, 0x2B	; 43
 9c6:	01 c0       	rjmp	.+2      	; 0x9ca <__stack+0xcb>
 9c8:	80 e2       	ldi	r24, 0x20	; 32
 9ca:	a7 fc       	sbrc	r10, 7
 9cc:	8d e2       	ldi	r24, 0x2D	; 45
 9ce:	b6 01       	movw	r22, r12
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9d6:	89 14       	cp	r8, r9
 9d8:	38 f4       	brcc	.+14     	; 0x9e8 <__stack+0xe9>
 9da:	b6 01       	movw	r22, r12
 9dc:	80 e3       	ldi	r24, 0x30	; 48
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9e4:	9a 94       	dec	r9
 9e6:	f7 cf       	rjmp	.-18     	; 0x9d6 <__stack+0xd7>
 9e8:	8a 94       	dec	r8
 9ea:	f3 01       	movw	r30, r6
 9ec:	e8 0d       	add	r30, r8
 9ee:	f1 1d       	adc	r31, r1
 9f0:	80 81       	ld	r24, Z
 9f2:	b6 01       	movw	r22, r12
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9fa:	81 10       	cpse	r8, r1
 9fc:	f5 cf       	rjmp	.-22     	; 0x9e8 <__stack+0xe9>
 9fe:	22 20       	and	r2, r2
 a00:	09 f4       	brne	.+2      	; 0xa04 <__stack+0x105>
 a02:	42 ce       	rjmp	.-892    	; 0x688 <vfprintf+0x24>
 a04:	b6 01       	movw	r22, r12
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 a0e:	2a 94       	dec	r2
 a10:	f6 cf       	rjmp	.-20     	; 0x9fe <__stack+0xff>
 a12:	f6 01       	movw	r30, r12
 a14:	86 81       	ldd	r24, Z+6	; 0x06
 a16:	97 81       	ldd	r25, Z+7	; 0x07
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <__stack+0x11f>
 a1a:	8f ef       	ldi	r24, 0xFF	; 255
 a1c:	9f ef       	ldi	r25, 0xFF	; 255
 a1e:	2b 96       	adiw	r28, 0x0b	; 11
 a20:	e2 e1       	ldi	r30, 0x12	; 18
 a22:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__epilogue_restores__>

00000a26 <strnlen_P>:
 a26:	fc 01       	movw	r30, r24
 a28:	05 90       	lpm	r0, Z+
 a2a:	61 50       	subi	r22, 0x01	; 1
 a2c:	70 40       	sbci	r23, 0x00	; 0
 a2e:	01 10       	cpse	r0, r1
 a30:	d8 f7       	brcc	.-10     	; 0xa28 <strnlen_P+0x2>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	8e 0f       	add	r24, r30
 a38:	9f 1f       	adc	r25, r31
 a3a:	08 95       	ret

00000a3c <strnlen>:
 a3c:	fc 01       	movw	r30, r24
 a3e:	61 50       	subi	r22, 0x01	; 1
 a40:	70 40       	sbci	r23, 0x00	; 0
 a42:	01 90       	ld	r0, Z+
 a44:	01 10       	cpse	r0, r1
 a46:	d8 f7       	brcc	.-10     	; 0xa3e <strnlen+0x2>
 a48:	80 95       	com	r24
 a4a:	90 95       	com	r25
 a4c:	8e 0f       	add	r24, r30
 a4e:	9f 1f       	adc	r25, r31
 a50:	08 95       	ret

00000a52 <fputc>:
 a52:	0f 93       	push	r16
 a54:	1f 93       	push	r17
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	fb 01       	movw	r30, r22
 a5c:	23 81       	ldd	r18, Z+3	; 0x03
 a5e:	21 fd       	sbrc	r18, 1
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <fputc+0x16>
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	2c c0       	rjmp	.+88     	; 0xac0 <fputc+0x6e>
 a68:	22 ff       	sbrs	r18, 2
 a6a:	16 c0       	rjmp	.+44     	; 0xa98 <fputc+0x46>
 a6c:	46 81       	ldd	r20, Z+6	; 0x06
 a6e:	57 81       	ldd	r21, Z+7	; 0x07
 a70:	24 81       	ldd	r18, Z+4	; 0x04
 a72:	35 81       	ldd	r19, Z+5	; 0x05
 a74:	42 17       	cp	r20, r18
 a76:	53 07       	cpc	r21, r19
 a78:	44 f4       	brge	.+16     	; 0xa8a <fputc+0x38>
 a7a:	a0 81       	ld	r26, Z
 a7c:	b1 81       	ldd	r27, Z+1	; 0x01
 a7e:	9d 01       	movw	r18, r26
 a80:	2f 5f       	subi	r18, 0xFF	; 255
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	31 83       	std	Z+1, r19	; 0x01
 a86:	20 83       	st	Z, r18
 a88:	8c 93       	st	X, r24
 a8a:	26 81       	ldd	r18, Z+6	; 0x06
 a8c:	37 81       	ldd	r19, Z+7	; 0x07
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	37 83       	std	Z+7, r19	; 0x07
 a94:	26 83       	std	Z+6, r18	; 0x06
 a96:	14 c0       	rjmp	.+40     	; 0xac0 <fputc+0x6e>
 a98:	8b 01       	movw	r16, r22
 a9a:	ec 01       	movw	r28, r24
 a9c:	fb 01       	movw	r30, r22
 a9e:	00 84       	ldd	r0, Z+8	; 0x08
 aa0:	f1 85       	ldd	r31, Z+9	; 0x09
 aa2:	e0 2d       	mov	r30, r0
 aa4:	09 95       	icall
 aa6:	89 2b       	or	r24, r25
 aa8:	e1 f6       	brne	.-72     	; 0xa62 <fputc+0x10>
 aaa:	d8 01       	movw	r26, r16
 aac:	16 96       	adiw	r26, 0x06	; 6
 aae:	8d 91       	ld	r24, X+
 ab0:	9c 91       	ld	r25, X
 ab2:	17 97       	sbiw	r26, 0x07	; 7
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	17 96       	adiw	r26, 0x07	; 7
 ab8:	9c 93       	st	X, r25
 aba:	8e 93       	st	-X, r24
 abc:	16 97       	sbiw	r26, 0x06	; 6
 abe:	ce 01       	movw	r24, r28
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	1f 91       	pop	r17
 ac6:	0f 91       	pop	r16
 ac8:	08 95       	ret

00000aca <__ultoa_invert>:
 aca:	fa 01       	movw	r30, r20
 acc:	aa 27       	eor	r26, r26
 ace:	28 30       	cpi	r18, 0x08	; 8
 ad0:	51 f1       	breq	.+84     	; 0xb26 <__ultoa_invert+0x5c>
 ad2:	20 31       	cpi	r18, 0x10	; 16
 ad4:	81 f1       	breq	.+96     	; 0xb36 <__ultoa_invert+0x6c>
 ad6:	e8 94       	clt
 ad8:	6f 93       	push	r22
 ada:	6e 7f       	andi	r22, 0xFE	; 254
 adc:	6e 5f       	subi	r22, 0xFE	; 254
 ade:	7f 4f       	sbci	r23, 0xFF	; 255
 ae0:	8f 4f       	sbci	r24, 0xFF	; 255
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	af 4f       	sbci	r26, 0xFF	; 255
 ae6:	b1 e0       	ldi	r27, 0x01	; 1
 ae8:	3e d0       	rcall	.+124    	; 0xb66 <__ultoa_invert+0x9c>
 aea:	b4 e0       	ldi	r27, 0x04	; 4
 aec:	3c d0       	rcall	.+120    	; 0xb66 <__ultoa_invert+0x9c>
 aee:	67 0f       	add	r22, r23
 af0:	78 1f       	adc	r23, r24
 af2:	89 1f       	adc	r24, r25
 af4:	9a 1f       	adc	r25, r26
 af6:	a1 1d       	adc	r26, r1
 af8:	68 0f       	add	r22, r24
 afa:	79 1f       	adc	r23, r25
 afc:	8a 1f       	adc	r24, r26
 afe:	91 1d       	adc	r25, r1
 b00:	a1 1d       	adc	r26, r1
 b02:	6a 0f       	add	r22, r26
 b04:	71 1d       	adc	r23, r1
 b06:	81 1d       	adc	r24, r1
 b08:	91 1d       	adc	r25, r1
 b0a:	a1 1d       	adc	r26, r1
 b0c:	20 d0       	rcall	.+64     	; 0xb4e <__ultoa_invert+0x84>
 b0e:	09 f4       	brne	.+2      	; 0xb12 <__ultoa_invert+0x48>
 b10:	68 94       	set
 b12:	3f 91       	pop	r19
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	26 9f       	mul	r18, r22
 b18:	11 24       	eor	r1, r1
 b1a:	30 19       	sub	r19, r0
 b1c:	30 5d       	subi	r19, 0xD0	; 208
 b1e:	31 93       	st	Z+, r19
 b20:	de f6       	brtc	.-74     	; 0xad8 <__ultoa_invert+0xe>
 b22:	cf 01       	movw	r24, r30
 b24:	08 95       	ret
 b26:	46 2f       	mov	r20, r22
 b28:	47 70       	andi	r20, 0x07	; 7
 b2a:	40 5d       	subi	r20, 0xD0	; 208
 b2c:	41 93       	st	Z+, r20
 b2e:	b3 e0       	ldi	r27, 0x03	; 3
 b30:	0f d0       	rcall	.+30     	; 0xb50 <__ultoa_invert+0x86>
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__ultoa_invert+0x5c>
 b34:	f6 cf       	rjmp	.-20     	; 0xb22 <__ultoa_invert+0x58>
 b36:	46 2f       	mov	r20, r22
 b38:	4f 70       	andi	r20, 0x0F	; 15
 b3a:	40 5d       	subi	r20, 0xD0	; 208
 b3c:	4a 33       	cpi	r20, 0x3A	; 58
 b3e:	18 f0       	brcs	.+6      	; 0xb46 <__ultoa_invert+0x7c>
 b40:	49 5d       	subi	r20, 0xD9	; 217
 b42:	31 fd       	sbrc	r19, 1
 b44:	40 52       	subi	r20, 0x20	; 32
 b46:	41 93       	st	Z+, r20
 b48:	02 d0       	rcall	.+4      	; 0xb4e <__ultoa_invert+0x84>
 b4a:	a9 f7       	brne	.-22     	; 0xb36 <__ultoa_invert+0x6c>
 b4c:	ea cf       	rjmp	.-44     	; 0xb22 <__ultoa_invert+0x58>
 b4e:	b4 e0       	ldi	r27, 0x04	; 4
 b50:	a6 95       	lsr	r26
 b52:	97 95       	ror	r25
 b54:	87 95       	ror	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	ba 95       	dec	r27
 b5c:	c9 f7       	brne	.-14     	; 0xb50 <__ultoa_invert+0x86>
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	61 05       	cpc	r22, r1
 b62:	71 05       	cpc	r23, r1
 b64:	08 95       	ret
 b66:	9b 01       	movw	r18, r22
 b68:	ac 01       	movw	r20, r24
 b6a:	0a 2e       	mov	r0, r26
 b6c:	06 94       	lsr	r0
 b6e:	57 95       	ror	r21
 b70:	47 95       	ror	r20
 b72:	37 95       	ror	r19
 b74:	27 95       	ror	r18
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__ultoa_invert+0xa2>
 b7a:	62 0f       	add	r22, r18
 b7c:	73 1f       	adc	r23, r19
 b7e:	84 1f       	adc	r24, r20
 b80:	95 1f       	adc	r25, r21
 b82:	a0 1d       	adc	r26, r0
 b84:	08 95       	ret

00000b86 <__prologue_saves__>:
 b86:	2f 92       	push	r2
 b88:	3f 92       	push	r3
 b8a:	4f 92       	push	r4
 b8c:	5f 92       	push	r5
 b8e:	6f 92       	push	r6
 b90:	7f 92       	push	r7
 b92:	8f 92       	push	r8
 b94:	9f 92       	push	r9
 b96:	af 92       	push	r10
 b98:	bf 92       	push	r11
 b9a:	cf 92       	push	r12
 b9c:	df 92       	push	r13
 b9e:	ef 92       	push	r14
 ba0:	ff 92       	push	r15
 ba2:	0f 93       	push	r16
 ba4:	1f 93       	push	r17
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
 bae:	ca 1b       	sub	r28, r26
 bb0:	db 0b       	sbc	r29, r27
 bb2:	0f b6       	in	r0, 0x3f	; 63
 bb4:	f8 94       	cli
 bb6:	de bf       	out	0x3e, r29	; 62
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	cd bf       	out	0x3d, r28	; 61
 bbc:	09 94       	ijmp

00000bbe <__epilogue_restores__>:
 bbe:	2a 88       	ldd	r2, Y+18	; 0x12
 bc0:	39 88       	ldd	r3, Y+17	; 0x11
 bc2:	48 88       	ldd	r4, Y+16	; 0x10
 bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bca:	8c 84       	ldd	r8, Y+12	; 0x0c
 bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
 bce:	aa 84       	ldd	r10, Y+10	; 0x0a
 bd0:	b9 84       	ldd	r11, Y+9	; 0x09
 bd2:	c8 84       	ldd	r12, Y+8	; 0x08
 bd4:	df 80       	ldd	r13, Y+7	; 0x07
 bd6:	ee 80       	ldd	r14, Y+6	; 0x06
 bd8:	fd 80       	ldd	r15, Y+5	; 0x05
 bda:	0c 81       	ldd	r16, Y+4	; 0x04
 bdc:	1b 81       	ldd	r17, Y+3	; 0x03
 bde:	aa 81       	ldd	r26, Y+2	; 0x02
 be0:	b9 81       	ldd	r27, Y+1	; 0x01
 be2:	ce 0f       	add	r28, r30
 be4:	d1 1d       	adc	r29, r1
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	ed 01       	movw	r28, r26
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>
